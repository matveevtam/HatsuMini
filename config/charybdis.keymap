#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#ifndef LAYERS
#define LAYERS

#define LAYER_DVORAK        0
#define LAYER_QWERTY        1
#define LAYER_MACOS         2
#define LAYER_SPEC          3
#define LAYER_NUMBER        4
#define LAYER_NAV_LINUX     5
#define LAYER_NAV_MACOS     6
#define LAYER_NAV           7
#define LAYER_FN            8
#define LAYER_HOTKEY        9
#define LAYER_MOUSE         10
#define LAYER_SNIPE         11
#define LAYER_SCROLL        12

#endif


#define TYPING_LAYERS \
    LAYER_DVORAK \
    LAYER_QWERTY \
    LAYER_MACOS \ 
    LAYER_SPEC \
    LAYER_NUMBER \
    LAYER_NAV_LINUX \
    LAYER_NAV_MACOS \
    LAYER_NAV

#define TYPING_LAYERS_NO_QWERTY \
    LAYER_DVORAK \
    LAYER_MACOS \ 
    LAYER_SPEC \
    LAYER_NUMBER \
    LAYER_NAV_LINUX \
    LAYER_NAV_MACOS \
    LAYER_NAV

#define ALL_LAYERS_NO_QWERTY \
    LAYER_DVORAK \
    LAYER_MACOS \ 
    LAYER_SPEC \
    LAYER_NUMBER \
    LAYER_NAV_LINUX \
    LAYER_NAV_MACOS \
    LAYER_NAV \
    LAYER_FN \
    LAYER_HOTKEY \
    LAYER_MOUSE \
    LAYER_SNIPE \
    LAYER_SCROLL


#define LR_DVO LAYER_DVORAK
#define LR_QWE LAYER_QWERTY
#define LR_SPC LAYER_SPEC
#define LR_NUM LAYER_NUMBER
#define LR_NAV LAYER_NAV
#define LR_NVL LAYER_NAV_LINUX
#define LR_NVM LAYER_NAV_MACOS
#define LR_FN  LAYER_FN
#define LR_HOT LAYER_HOTKEY
#define LR_MOU LAYER_MOUSE
#define LR_SNP LAYER_SNIPE
#define LR_SCR LAYER_SCROLL


#define LT_SPC      &lt     LAYER_SPEC
#define LLT_SPC     &llt    LAYER_SPEC
#define MO_SPC      &exmo   LAYER_SPEC
#define LT_NUM      &lt     LAYER_NUMBER
#define LLT_NUM     &llt    LAYER_NUMBER
#define MO_NUM      &exmo   LAYER_NUMBER
#define LT_NAV      &lt     LAYER_NAV
#define LLT_NAV     &llt    LAYER_NAV
#define MO_NAV      &exmo   LAYER_NAV
#define LT_FN       &lt     LAYER_FN
#define LLT_FN      &llt    LAYER_FN
#define MO_FN       &exmo   LAYER_FN
#define LT_MOU      &lt     LAYER_MOUSE
#define LLT_MOU     &llt    LAYER_MOUSE
#define MO_MOU      &exmo   LAYER_MOUSE
#define LT_SCR      &lt     LAYER_SCROLL
#define LLT_SCR     &llt    LAYER_SCROLL
#define MO_SCR      &exmo   LAYER_SCROLL
#define LT_HOT      &lt     LAYER_HOTKEY
#define LLT_HOT     &llt    LAYER_HOTKEY
#define MO_HOT      &exmo   LAYER_HOTKEY


#define LANG_TOGGLE LA(SPACE)


#define KEY_LMOD 36
#define KEY_RMOD 40

#define HML_SHF    &hml LSHFT
#define HML_ALT    &hml LALT
#define HML_CMD    &hml LCMD
#define HML_CTR    &hml LCTRL

#define HMR_CTR    &hmr LCTRL
#define HMR_CMD    &hmr LCMD
#define HMR_ALT    &hmr LALT
#define HMR_SHF    &hmr LSHFT

#define HMB1 &hmtk MB1
#define HMB2 &hmtk MB2

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        conditional_nav_linux_layer {
            if-layers = <LAYER_NAV>;
            then-layer = <LAYER_NAV_LINUX>;
        };

        conditional_nav_macos_layer {
            if-layers = <LAYER_NAV LAYER_MACOS>;
            then-layer = <LAYER_NAV_MACOS>;
        };
    };
    
    behaviors {
        tog_on: toggle_layer_on_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer On";
            toggle-mode = "on";
        };

        tog_off: toggle_layer_off_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };

        lmt: layer_mouse_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&mkp>;
            display-name = "Layer-Mouse-Tap";
        };

        llt: layer_language_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&macro_switch_language_hold>, <&kp>;
            display-name = "Layer-Language-Tap v2";
        };

        hmtk: hold_mouse_tap_key {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mkp>, <&kp>;
            display-name = "Hold Mouse Tap Key";
        };

        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <
                           6  7  8  9  10 11
                           18 19 20 21 22 23
                           30 31 32 33 34 35
                36 37 38   39 40
            >;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <
                0  1  2  3  4  5 
                12 13 14 15 16 17
                24 25 26 27 28 29
                         36 37 38   39 40
            >;
            hold-trigger-on-release;
        };

        vb_up: volume_brightness_up {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp C_VOL_UP>, <&kp C_BRI_UP>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        vb_dn: volume_brightness_down {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp C_VOL_DN>, <&kp C_BRI_DN>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        macos_bsp: macos_backspase {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp LA(BSPC)>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        macos_del: macos_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DEL>, <&kp LA(DEL)>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };
    };

    macros {

        macro_switch_language: macro_switch_language {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings 
                = <&macro_param_1to1>
                , <&macro_tap &to MACRO_PLACEHOLDER>
                , <&macro_tap &kp LANG_TOGGLE>
                ;
            display-name = "Switch Language Macro";
        };

        macro_switch_language_hold: macro_switch_language_hold {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings 
                = <&macro_tap &kp LANG_TOGGLE>
                , <&macro_param_1to1>
                , <&macro_press &mo MACRO_PLACEHOLDER>
                , <&macro_pause_for_release>
                , <&macro_param_1to1>
                , <&macro_release &mo MACRO_PLACEHOLDER>
                , <&macro_tap &kp LANG_TOGGLE>
                ;
            display-name = "Switch Language Hold Macro";
        };
        
        // toggle off layer 2, toggle on layer 1
        // wait for release
        // toggle on layer 2, toggle off layer 1
        // param1: layer 1
        // param2: layer 2
        exmo: macro_exclusive_mo {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings 
                = <&macro_param_2to1>
                , <&macro_tap &tog_off MACRO_PLACEHOLDER>
                , <&macro_param_1to1>
                , <&macro_tap &tog_on MACRO_PLACEHOLDER>
                , <&macro_pause_for_release>
                , <&macro_param_2to1>
                , <&macro_tap &tog_on MACRO_PLACEHOLDER>
                , <&macro_param_1to1>
                , <&macro_tap &tog_off MACRO_PLACEHOLDER>
                ;
            display-name = "To Layer Hold Macro";
        };

    };

    /*
        key positions:
        0  1  2  3  4  5     6  7  8  9  10 11
        12 13 14 15 16 17    18 19 20 21 22 23
        24 25 26 27 28 29    30 31 32 33 34 35
                 36 37 38    39 40
    */

    combos {
        compatible = "zmk,combos";

    // ======== Common keys ========
        combo_esc {
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        combo_printscreen {
            key-positions = <0 12>;
            bindings = <&kp PRINTSCREEN>;
        };
        combo_ralt {
            key-positions = <12 24>;
            bindings = <&kp RALT>;
        };
        combo_mb3 {
            key-positions = <39 40>;
            bindings = <&mkp MB3>;
        };
        combo_caps_word {
            key-positions = <23 35>;
            bindings = <&caps_word>;
        };
        // left hand
        combo_paren_left_lh {
            key-positions = <14 15>;
            layers = <TYPING_LAYERS>;
            bindings = <&kp LPAR>;
        };
        combo_paren_right_lh {
            key-positions = <15 16>;
            layers = <TYPING_LAYERS>;
            bindings = <&kp RPAR>;
        };
        combo_bracket_left_lh {
            key-positions = <2 3>;
            layers = <TYPING_LAYERS_NO_QWERTY>;
            bindings = <&kp LEFT_BRACKET>;
        };
        combo_bracket_right_lh {
            key-positions = <3 4>;
            layers = <TYPING_LAYERS_NO_QWERTY>;
            bindings = <&kp RIGHT_BRACKET>;
        };
        // right hand
        combo_paren_left_rh {
            key-positions = <19 20>;
            layers = <TYPING_LAYERS>;
            bindings = <&kp LPAR>;
        };
        combo_paren_right_rh {
            key-positions = <20 21>;
            layers = <TYPING_LAYERS>;
            bindings = <&kp RPAR>;
        };
        combo_bracket_left_rh {
            key-positions = <7 8>;
            layers = <TYPING_LAYERS_NO_QWERTY>;
            bindings = <&kp LEFT_BRACKET>;
        };
        combo_bracket_right_rh {
            key-positions = <8 9>;
            layers = <TYPING_LAYERS_NO_QWERTY>;
            bindings = <&kp RIGHT_BRACKET>;
        };
    // ======== Common keys ========

    // ======== Switching between regular layers ========
        // left hand
        combo_to_dvorak_layer_lh {
            key-positions = <16 KEY_LMOD>;
            layers = <ALL_LAYERS_NO_QWERTY>;
            bindings = <&to LAYER_DVORAK>;
        };
        combo_to_nav_layer_lh {
            key-positions = <3 KEY_LMOD>;
            layers = <ALL_LAYERS_NO_QWERTY>;
            bindings = <&to LAYER_NAV>;
        };
        combo_to_mouse_layer_lh {
            key-positions = <15 KEY_LMOD>;
            layers = <ALL_LAYERS_NO_QWERTY>;
            bindings = <&to LAYER_MOUSE>;
        };
        combo_to_spec_layer_lh {
            key-positions = <2 KEY_LMOD>;
            layers = <ALL_LAYERS_NO_QWERTY>;
            bindings = <&to LAYER_SPEC>;
        };
        combo_to_numbers_layer_lh {
            key-positions = <14 KEY_LMOD>;
            layers = <ALL_LAYERS_NO_QWERTY>;
            bindings = <&to LAYER_NUMBER>;
        };
        combo_to_fn_layer_lh {
            key-positions = <1 KEY_LMOD>;
            layers = <ALL_LAYERS_NO_QWERTY>;
            bindings = <&to LAYER_FN>;
        };
        combo_to_hotkey_layer_lh {
            key-positions = <13 KEY_LMOD>;
            layers = <ALL_LAYERS_NO_QWERTY>;
            bindings = <&to LAYER_HOTKEY>;
        };
        // right hand
        combo_to_dvorak_layer_rh {
            key-positions = <19 KEY_RMOD>;
            layers = <ALL_LAYERS_NO_QWERTY>;
            bindings = <&to LAYER_DVORAK>;
        };
        combo_to_nav_layer_rh {
            key-positions = <8 KEY_RMOD>;
            layers = <ALL_LAYERS_NO_QWERTY>;
            bindings = <&to LAYER_NAV>;
        };
        combo_to_mouse_layer_rh {
            key-positions = <20 KEY_RMOD>;
            layers = <ALL_LAYERS_NO_QWERTY>;
            bindings = <&to LAYER_MOUSE>;
        };
        combo_to_spec_layer_rh {
            key-positions = <9 KEY_RMOD>;
            layers = <ALL_LAYERS_NO_QWERTY>;
            bindings = <&to LAYER_SPEC>;
        };
        combo_to_numbers_layer_rh {
            key-positions = <21 KEY_RMOD>;
            layers = <ALL_LAYERS_NO_QWERTY>;
            bindings = <&to LAYER_NUMBER>;
        };
        combo_to_fn_layer_rh {
            key-positions = <10 KEY_RMOD>;
            layers = <ALL_LAYERS_NO_QWERTY>;
            bindings = <&to LAYER_FN>;
        };
        combo_to_hotkey_layer_rh {
            key-positions = <22 KEY_RMOD>;
            layers = <ALL_LAYERS_NO_QWERTY>;
            bindings = <&to LAYER_HOTKEY>;
        };
    // ======== Switching between regular layers ========

    // ======== Switching to and from Cyrillic layer ========
        // left hand
        combo_cyrillic_to_qwerty_layer_lh {
            key-positions = <4 KEY_LMOD>;
            layers = <ALL_LAYERS_NO_QWERTY>;
            bindings = <&macro_switch_language LAYER_QWERTY>;
        };
        combo_cyrillic_to_dvorak_layer_lh {
            key-positions = <16 KEY_LMOD>;
            layers = <LAYER_QWERTY>;
            bindings = <&macro_switch_language LAYER_DVORAK>;
        };
        combo_cyrillic_to_nav_layer_lh {
            key-positions = <3 KEY_LMOD>;
            layers = <LAYER_QWERTY>;
            bindings = <&macro_switch_language LAYER_NAV>;
        };
        combo_cyrillic_to_mouse_layer_lh {
            key-positions = <15 KEY_LMOD>;
            layers = <LAYER_QWERTY>;
            bindings = <&macro_switch_language LAYER_MOUSE>;
        };
        combo_cyrillic_to_spec_layer_lh {
            key-positions = <2 KEY_LMOD>;
            layers = <LAYER_QWERTY>;
            bindings = <&macro_switch_language LAYER_SPEC>;
        };
        combo_cyrillic_to_numbers_layer_lh {
            key-positions = <14 KEY_LMOD>;
            layers = <LAYER_QWERTY>;
            bindings = <&macro_switch_language LAYER_NUMBER>;
        };
        combo_cyrillic_to_fn_layer_lh {
            key-positions = <1 KEY_LMOD>;
            layers = <LAYER_QWERTY>;
            bindings = <&macro_switch_language LAYER_FN>;
        };
        combo_cyrillic_to_hotkey_layer_lh {
            key-positions = <13 KEY_LMOD>;
            layers = <LAYER_QWERTY>;
            bindings = <&macro_switch_language LAYER_HOTKEY>;
        };
        // right hand
        combo_cyrillic_to_qwerty_layer_rh {
            key-positions = <7 KEY_RMOD>;
            layers = <ALL_LAYERS_NO_QWERTY>;
            bindings = <&macro_switch_language LAYER_QWERTY>;
        };
        combo_cyrillic_to_dvorak_layer_rh {
            key-positions = <19 KEY_RMOD>;
            layers = <LAYER_QWERTY>;
            bindings = <&macro_switch_language LAYER_DVORAK>;
        };
        combo_cyrillic_to_nav_layer_rh {
            key-positions = <8 KEY_RMOD>;
            layers = <LAYER_QWERTY>;
            bindings = <&macro_switch_language LAYER_NAV>;
        };
        combo_cyrillic_to_mouse_layer_rh {
            key-positions = <20 KEY_RMOD>;
            layers = <LAYER_QWERTY>;
            bindings = <&macro_switch_language LAYER_MOUSE>;
        };
        combo_cyrillic_to_spec_layer_rh {
            key-positions = <9 KEY_RMOD>;
            layers = <LAYER_QWERTY>;
            bindings = <&macro_switch_language LAYER_SPEC>;
        };
        combo_cyrillic_to_numbers_layer_rh {
            key-positions = <21 KEY_RMOD>;
            layers = <LAYER_QWERTY>;
            bindings = <&macro_switch_language LAYER_NUMBER>;
        };
        combo_cyrillic_to_fn_layer_rh {
            key-positions = <10 KEY_RMOD>;
            layers = <LAYER_QWERTY>;
            bindings = <&macro_switch_language LAYER_FN>;
        };
        combo_cyrillic_to_hotkey_layer_rh {
            key-positions = <22 KEY_RMOD>;
            layers = <LAYER_QWERTY>;
            bindings = <&macro_switch_language LAYER_HOTKEY>;
        };
    // ======== Switching to and from Cyrillic layer ========

    // ======== Cyrillic missing characters and specials ========
        combo_cyrillic_colon {
            key-positions = <7 8>;
            layers = <LAYER_QWERTY>;
            bindings = <&kp LS(N6)>;
        };
        combo_cyrillic_semicolon {
            key-positions = <8 9>;
            layers = <LAYER_QWERTY>;
            bindings = <&kp LS(N4)>;
        };
        combo_cyrillic_question_mark {
            key-positions = <9 10>;
            layers = <LAYER_QWERTY>;
            bindings = <&kp LS(N7)>;
        };
        combo_cyrillic_hard_sign {
            key-positions = <10 11>;
            layers = <LAYER_QWERTY>;
            bindings = <&kp RIGHT_BRACKET>;
        };
    // ======== Cyrillic missing characters and specials ========

    // ======== Toggle MacOS Layer ========
        combo_macos_off {
            key-positions = <5 KEY_LMOD>;
            bindings = <&tog_off LAYER_MACOS>;
        };
        combo_macos_on {
            key-positions = <17 KEY_LMOD>;
            bindings = <&tog_on LAYER_MACOS>;
        };
    // ======== Toggle MacOS Layer ========
        
    };

    keymap {
        compatible = "zmk,keymap";

        layer_dvorak {
            label = "Dvorak";
            bindings = <
                &kp GRAVE    LT_FN SEMI      LT_SPC COMMA    LT_NAV DOT    &kp P        &kp Y            &kp F    &kp G        &kp C        &kp R        &kp L        &kp BACKSLASH
                &kp BSPC     LT_HOT A        LT_NUM O        LT_MOU E      &kp U        &kp I            &kp D    HMB1 H       LT_SCR T     HMB2 N       &kp S        &kp MINUS
                &kp DEL      HML_SHF APOS    HML_ALT Q       HML_CMD J     HML_CTR K    &kp X            &kp B    HMR_CTR M    HMR_CMD W    HMR_ALT V    HMR_SHF Z    &kp SLASH

                                                            &kp TAB    &kp SPACE    &kp ENTER            &mkp MB2    &mkp MB1
            >;
        };

        layer_qwerty {
            label = "Qwerty";
            bindings = <
                &kp GRAVE    LLT_FN Q     LLT_SPC W     LLT_NAV E    &kp R        &kp T            &kp Y    &kp U        &kp I            &kp O          &kp P            &kp LEFT_BRACKET
                &trans       LLT_HOT A    LLT_NUM S     LLT_MOU D    &kp F        &kp G            &kp H    HMB1 J       LT_SCR K         HMB2 L         &kp SEMICOLON    &kp APOS
                &trans       HML_SHF Z    HML_ALT X     HML_CMD C    HML_CTR V    &kp B            &kp N    HMR_CTR M    HMR_CMD COMMA    HMR_ALT DOT    HMR_SHF SLASH    &kp MINUS

                                                             &trans    &trans    &trans            &trans    &trans
            >;
        };
        
        layer_macos {
            label = "MacOS";
            bindings = <
                &trans        &trans    &trans    &trans    &trans    &trans            &trans    &trans    &trans    &trans    &trans    &trans
                &macos_bsp    &trans    &trans    &trans    &trans    &trans            &trans    &trans    &trans    &trans    &trans    &trans
                &macos_del    &trans    &trans    &trans    &trans    &trans            &trans    &trans    &trans    &trans    &trans    &trans
                                                                    
                                                  &trans    &trans    &trans            &trans    &trans
            >;
        };

        layer_special {
            label = "Special";
            bindings = <
                &none     MO_FN LR_SPC      MO_SPC LR_SPC     MO_NAV LR_SPC     &none     &none            &none    &kp AMPS        &kp ASTRK       &kp EQUAL        &kp LS(MINUS)        &kp BACKSLASH
                &trans    MO_HOT LR_SPC     MO_NUM LR_SPC     MO_MOU LR_SPC     &none     &none            &none    HMB1 DLLR       LT_SCR PRCNT    HMB2 CARET       &kp LS(EQUAL)        &kp MINUS
                &trans    &trans            &trans            &trans            &trans    &none            &none    HMR_CTR EXCL    HMR_CMD AT      HMR_ALT HASH     HMR_SHF LS(SLASH)    &kp SLASH

                                                                     &trans    &trans    &trans            &trans    &trans
            >;
        };

        layer_number {
            label = "Number";
            bindings = <
                &none     MO_FN LR_NUM      MO_SPC LR_NUM     MO_NAV LR_NUM     &none     &none            &kp MINUS    &kp N7        &kp N8        &kp N9        &kp SLASH      &kp CARET
                &trans    MO_HOT LR_NUM     MO_NUM LR_NUM     MO_MOU LR_NUM     &none     &none            &kp PLUS     HMB1 N4       LT_SCR N5     HMB2 N6       &kp ASTRK      &kp EQUAL
                &trans    &trans            &trans            &trans            &trans    &none            &kp N0       HMR_CTR N1    HMR_CMD N2    HMR_ALT N3    HMR_SHF DOT    &kp COLON

                                                                     &trans    &trans    &trans            &trans      &trans
            >;
        };

        layer_nav_linux {
            label = "Navigation Linux";
            bindings = <
                &none     &none     &none     &none     &none     &none            &none       &none            &none    &none             &none      &kp L
                &trans    &none     &none     &none     &none     &none            &none       HMB1 LC(LEFT)    &none    HMB2 LC(RIGHT)    &none      &none
                &trans    &trans    &trans    &trans    &trans    &none            &kp HOME    &none            &none    &none             &kp END    &none

                                             &trans    &trans    &trans            &trans        &trans
            >;
        };

        layer_nav_macos {
            label = "Navigation MacOS";
            bindings = <
                &none     &none     &none     &none     &none     &none            &none           &kp LC(LEFT)     &none    &kp LC(RIGHT)     &none            &kp M
                &trans    &none     &none     &none     &none     &none            &none           HMB1 LA(LEFT)    &none    HMB2 LA(RIGHT)    &none            &none
                &trans    &trans    &trans    &trans    &trans    &none            &kp LG(LEFT)    &none            &none    &none             &kp LG(RIGHT)    &none

                                             &trans    &trans    &trans            &trans        &trans
            >;
        };

        layer_nav {
            label = "Navigation";
            bindings = <
                &none     MO_FN LR_NAV      MO_SPC LR_NAV     MO_NAV LR_NAV     &none     &none            &none        &trans      &none       &trans       &none        &trans
                &trans    MO_HOT LR_NAV     MO_NUM LR_NAV     MO_MOU LR_NAV     &none     &none            &kp PG_UP    &trans      &kp UP      &trans       &kp PG_DN    &none
                &trans    &trans            &trans            &trans            &trans    &none            &trans       &kp LEFT    &kp DOWN    &kp RIGHT    &trans       &none

                                                                     &trans    &trans    &trans            &trans        &trans
            >;
        };

        layer_fn {
            label = "FN";
            bindings = <
                &none     MO_FN LR_FN      MO_SPC LR_FN     MO_NAV LR_FN     &none     &none            &none    &kp F9        &kp F10       &kp F11       &kp F12       &bootloader
                &trans    MO_HOT LR_FN     MO_NUM LR_FN     MO_MOU LR_FN     &none     &none            &none    HMB1 F5       LT_SCR F6     HMB2 F7       &kp F8        &sys_reset
                &trans    &trans           &trans           &trans           &trans    &none            &none    HMR_CTR F1    HMR_CMD F2    HMR_ALT F3    HMR_SHF F4    &none

                                                                  &trans    &trans    &trans            &trans    &trans
            >;
        };
        
        layer_hotkey {
            label = "Hotkey";
            bindings = <
                &none     MO_FN LR_HOT      MO_SPC LR_HOT     MO_NAV LR_HOT     &none     &none            &none    &none     &none             &none     &none     &kp C_MUTE
                &trans    MO_HOT LR_HOT     MO_NUM LR_HOT     MO_MOU LR_HOT     &none     &none            &none    &none     MO_SCR LR_HOT     &none     &none     &vb_up
                &trans    &trans            &trans            &trans            &trans    &none            &none    &trans    &trans            &trans    &trans    &vb_dn

                                                                     &trans    &trans    &trans            &trans    &trans
            >;
        };

        layer_mouse {
            label = "Mouse";
            bindings = <
                &none     MO_FN LR_MOU      MO_SPC LR_MOU     MO_NAV LR_MOU     &none     &none            &none    &none        &none               &none        &none              &none
                &trans    MO_HOT LR_MOU     MO_NUM LR_MOU     MO_MOU LR_MOU     &none     &none            &none    &mkp MB1     &lmt LR_SCR MB3     &mkp MB2     &none              &none
                &trans    &trans            &trans            &trans            &trans    &none            &none    &mkp MB4     &none               &mkp MB5     &mo LAYER_SNIPE    &none

                                                                     &trans    &trans    &trans            &trans    &trans
            >;
        };
        
        layer_snipe {
            label = "Snipe";
            bindings = <
                &trans    &trans    &trans    &trans    &trans    &trans            &trans    &trans    &trans    &trans    &trans    &trans
                &trans    &trans    &trans    &trans    &trans    &trans            &trans    &trans    &trans    &trans    &trans    &trans
                &trans    &trans    &trans    &trans    &trans    &trans            &trans    &trans    &trans    &trans    &trans    &trans
                                                                    
                                              &trans    &trans    &trans            &trans    &trans
            >;
        };
        
        layer_scroll {
            label = "Scroll";
            bindings = <
                &trans    &trans    &trans    &trans    &trans    &trans            &trans    &trans    &trans    &trans    &trans    &trans
                &trans    &trans    &trans    &trans    &trans    &trans            &trans    &trans    &trans    &trans    &trans    &trans
                &trans    &trans    &trans    &trans    &trans    &trans            &trans    &trans    &trans    &trans    &trans    &trans
                                                                    
                                              &trans    &trans    &trans            &trans    &trans
            >;
        };

        /*
        // empty_layer {
        //     label = "Empty";
        //     bindings = <
        //         &trans    &trans    &trans    &trans    &trans    &trans            &trans    &trans    &trans    &trans    &trans    &trans
        //         &trans    &trans    &trans    &trans    &trans    &trans            &trans    &trans    &trans    &trans    &trans    &trans
        //         &trans    &trans    &trans    &trans    &trans    &trans            &trans    &trans    &trans    &trans    &trans    &trans
        //                                                                                                                                     
        //                                       &trans    &trans    &trans            &trans    &trans
        //     >;
        // };
        */

    };
};
